内部类 = 定义在一个类类体当中的类

为什么要使用内部类:
	内部类是Java当中共享数据最最简单的方式之一

内部类的分类:	能够共享到什么	

成员内部类:	外部类的所有[静态+非静态]成员[属性+方法]
		如何创建对象:
		  Outer.Inner in = new Outer().new Inner();
		#:如何理解其与外部类的关系：蛔虫与牛的关系

静态内部类:	外部类的静态成员[属性+方法]
		如何创建对象:
		  Outer.Inner in = new Outer.Inner();
		#:如何理解其与外部类的关系：寄居蟹和蛤蜊壳

局部内部类:	外部类的所有成员[所在的外部类方法是非静态的]
		外部类的静态成员[所在的外部类方法是静态的]
		+ JDK8.0之前 所有final修饰的局部变量
		  [JDK8.0之后可以不加final但是其实还是final]
		如何创建对象:
		  Inner in = new Inner();
		  *:有位置限定 它定义完成之后 所在方法结束之前
		#:如何理解其与外部类的关系：我和你的关系

匿名内部类:
	*: 如果我们生个孩子 就是为了卖钱的 那么还用起名字吗?
	*: 有些场景下 我们自己的名字根本就不重要 
		反而父母或者叔叔阿姨的名字才有意义
	
	new 父类/接口(){
		类体当中完成方法覆盖;
	}

	它能共享外部类的什么取决于定义它的位置！


*：如何完成数据共享:
	1.使用静态变量完成数据共享
	2.使用传参完成数据共享
	3.使用内部类完成数据共享


Exception => 异常 => 例外
	程序运行过程当中出现的例外情况

Java当中所有问题的体系结构

			Throwable[可以抛出的]


		Error			Exception
		[错误]			[异常]

					RuntimeException
					[运行时异常]

#: Error & Exception 的区别?
	Error => 是指由于底层硬件环境或者系统原因出现的
			程序员通过代码无法解决的问题
	Exception => 是指运行过程当中出现的例外情况而已

#: 运行时异常和非运行时异常的区别?
	非运行时异常在编译的时候 就要求给出明确的处理方案
		否则编译都无法通过
	运行时异常 编译时不需要进行任何处理 直接到运行时体现出来

#: 到今天为止 我们遇见过的所有运行时异常
	ArithmeticException		算术异常
	NegativeArraySizeException	负数数组大小异常
	ArrayIndexOutOfBoundsException 	数组索引值超出边界异常
	StringIndexOutOfBoundsException	字符串索引值超出边界异常
	NumberFormatException		数字格式异常
	NullPointerException		空指针异常
	ClassCastException		类造型异常
	IllegalArgumentException	非法参数异常
	IndexOutOfBoundsException	索引值超出边界异常
	IllegalStateException		非法状态异常
	ConcurrentModificationException	并发修改异常

为什么要处理异常?
	a.非运行时异常 不做处理编译都无法通过
	b.程序一旦出现异常 之后的代码就都不执行了

如何处理异常:
	1.抛还上级 throws		
		[足以解决a但无力解决b]

	2.自行处理 try catch finally
		try{
			可能出现异常的语句;
			除非特殊需求 否则就该一句;
		}catch(要捕获的异常的类型 异常代号){
			System.out.println(异常代号.getMessage());
			异常代号.printStackTrace();
		}finally{
			无论是否出现异常 最终都要执行的操作
			通常是释放和关闭资源的操作
			[不应当出现return语句]
		}
		
		*:一个try 后面可以多个catch但是不能前面包含后面
		*:JDK7.0开始 一个catch可以捕获多种不同异常 用|隔开
	

如何自定义异常 以及 主动创建异常出现:
	自定义异常
		让我们自己实现的异常类型
			继承Exception或者RuntimeException
		构造方法当中可以使用super("指定异常简要描述");

	throw : 用在方法体当中 在没有异常出现的场景下 
		主动制造异常出现 
					[没事找事型的]
	throws : 用在方法签名的最后 本方法当中出现指定种类的异常
		 本方法不做处理 将异常转交给上级调用者处理
					 [有事甩锅型的]
























