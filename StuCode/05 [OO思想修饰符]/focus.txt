Java当中的访问控制权限修饰符

每个修饰符的意义：
public ：	公共的   任何位置都可以使用的 
protected ： 	受保护的 本包内可用 包外有继承关系的子类中也可用
(default) ：	默认的   只有本包内可以使用的
private ： 	私有的   只有本类当中可以使用的

它们都能修饰什么：	类		成员(属性、方法)
private			false		true
(default)		true		true
protected		false		true
public			true		true


final	最终的 Modifier 形容词

	1>类：	最终类 骡子类 
		不能派生子类 不能被继承
		final : String   Math

	2>方法：最终方法 不能被覆盖
		不在乎多少个类通过继承得到它	- 可以继承
		只是这个方法都必须是最后的版本了	- 不能覆盖

	3>变量：最终变量 一旦赋值 就再也不能修改
		a>基本数据类型 值不能修改
		b>引用数据类型 是指向的地址不能修改了


static	静态的 修饰符 形容词
	
	1>属性：	静态属性
		在内存当中只有一份值
		不依赖任何一个对象存在 是整个这个类共享的同一份
		访问静态属性 可以不使用对象.属性
		直接使用类名.属性名

		*: 静态属性与对象无关 在类被加载的时候初始化

	2>方法：静态方法
		静态方法不需要对象就可以调用
		可以直接使用类名.方法名()
		(非静态的方法必须使用对象.方法名())
		例如：
			System.arraycopy();
			Arrays.sort();
			System.currentTimeMillis();
			String.valueOf();

		静态方法调用起来更加方便直接
			为什么不把所有方法都定义成静态的呢?

		静态方法不能直接访问非静态属性  （可以直接访问静态属性）
			静态方法的调用是通过类名调用的
			也就是说很可能没有对象就调用方法了
			如果没有对象哪来的属性

	3>代码块：静态初始化块
		普通的初始化块 用于初始化非静态的属性
			每创建一个对象执行一次
		静态初始化块 用于初始化静态属性(静态属性只有一份)
			所以 静态初始化块在类第一次被加载的时候执行
			且只执行一次 跟创建几个对象没有关系


		*：让我们一起来看看 谁谁谁的执行先后顺序
















