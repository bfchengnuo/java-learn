单例模式 ： 一个类有且只有一个实例(对象)
	设计模式 = 
	世界上本没有设计模式 用的程序员多了 也就有了模式

	最大限度的节约资源开支

	1st.私有化构造方法 防止类体之外随意new对象
	2nd.本类当中创建一个当前类型的对象
		为了防止无限套蛋的问题 应当使用static修饰
		为了防止恶意的修改 应当private修饰
	3rd.提供一个公共的getter方法
		这个方法应当是静态的 必须是不需要对象就能调用

	醉汉式：不计后果 不论做的是否有意义 是不是对 做了再说
	懒汉式：不到最后关头 坚决不做

	口诀：private*2 + static*2 + public*1 = 单例


abstract   抽象的 不形象的 不具体的
	方法：	抽象方法
		描述当前类型一定有这个方法
		但是眼下给不出具体实现 具体实现留待子类当中完成
		* ： 抽象方法不允许有方法体 直接;结束

	类：	抽象类
		这个类描述的概念不形象 不具体 不允许创建对象

	*：一个类只要有一个抽象方法 则这个类必须是抽象类
		抽象类可以没有抽象方法
		但是有抽象方法必然是抽象类

	*：抽象类是类吗？ 是的
		据说是个类就有构造方法
		请问抽象类有构造方法吗？ 有的
		它都不能创建对象 它要构造方法干嘛？
		
接口  interface
	
	class	interface	enum	annotation
	它们编译之后都会生成.class文件

	接口 = 规范 = 标准 = 工业生产当中的标准

	接口当中定义的变量 ： 自动添加 public static final
				就是常量

	接口当中定义的方法 ： 自动添加 public abstract 

	*:接口有助于解除类和类之间的耦合关系
		让先出现的类型(Computer)不做任何修改的情况下
		就能跟之后若干时间出现的类型(Tank)结合使用

		Computer -> 使用规范的类型
		Tank -> 遵循规范的类型	implements USB
		USB -> 规范本身

	*:接口有助于解除人和人之间的耦合关系
		让团队开发当中不至于出现相互制约的现象

	*:类不能继承接口 只能实现接口
	*:接口不能实现接口 只能继承接口 而且支持多重继承
	*:一个类可以在继承另一个类的情况下 实现无数个接口

	*:JDK8.0开始 接口当中有两种情况是可能出现方法体的
		1> static修饰的静态方法
		2> default修饰的默认方法


*：接口和抽象类的区别?
	接口和类是完全不同的两种概念
	类是class  接口是interface
	类当中定义的变量 代表每个这个类型的对象都有一份的属性
	接口当中定义的变量 代表常量 public static final
	类当中定义的方法 可以是抽象的 可以是具体的
	接口当中定义的方法 在8.0之前 必须得是抽象方法




























	