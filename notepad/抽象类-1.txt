抽象类

abstract  抽象，修饰函数必须修饰这个类，抽象类不可以被实例化（new）不可以创建对象，因为没意义
			abstract void show();  函数定义
		  子类中必须覆盖了抽象方法后才可以被实例化，否则子类也是抽象类

1.抽象类有构造函数么？

	有，用于给子类对象进行初始化
	
2.抽象类可以不定义抽象方法么？
	
	可以，少见，目的就是不让该类创建对象，//我想到了单例模式的私有化构造函数
	方法体  ｛｝
	AWT的适配器对象就是这种类

3.抽象关键字于 
	private（私有）不能共存，私有后抽象方法无法被覆盖
	static(静态) 不能共存，成员变静态不需要对象    0.0 不能直接调用运行？
	final  不能共存，不允许被覆盖/继承     
	
4.抽象类是一个父类   只有被覆盖后才可以使用
  抽象类可以定义非抽象方法，非抽象类只能定义非抽象方法
  
--------------------------fgx----------------------------------

接口 interface

一个抽象类中方法全是抽象的时候，这时可以将改抽象类用另一种方式定义和表示

定义接口的关键字 interface  和class相似



接口中常见的成员，都有固定的修饰符,
	+全局常量
		public static final
	+抽象方法
		public abstract 
		
	结论：接口中的成员都是公共权限，因为interface所以可以省略修饰符（不推荐）阅读性差
	interface Demo
	{
		public abstract void show1();
		public abstract void show2();
		public static final int num = 4;
	}	
	
类与类之间是继承关系  类与接口之间是实现关系  implements
接口与接口之间是继承关系，并且可以多继承  
	类的多继承不行是因为方法体的不确定性  接口没有方法体so
接口也不可以实例化，子类必须覆盖后才能实例化 同 abstract，可以多实现
XXXImp 名字一般定义

ps:

class Test implements A,Z
{

}
A Z中如果相同的函数名不同的返回值，不允许   0.0





以下代码可以编译运行
// interface 定义的类可以直接引用类名
class chouxiang
{
	public static void main(String[] args)
	{
		System.out.println(lss.num);
	}
}

interface lss
{
	public static final int num = 4;
}